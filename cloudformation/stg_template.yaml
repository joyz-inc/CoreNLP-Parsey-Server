AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Stanford CoreNLP Server

Resources:
  # Needs: AWS::EC2::VPC and AWS::EC2::InternetGateway?
  # Limit 5 per region -- maybe we can use pre-existing one.
  CoreNLPLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows access to CoreNLP from internet
    # Default VPC
      VpcId: vpc-25c00640
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9000'
          ToPort: '9000'
          CidrIp: 0.0.0.0/0
  CoreNLPInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows access from CoreNLP Load Balancer to EC2 Instances
      # Default VPC
      VpcId: vpc-25c00640
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9000'
          ToPort: '9000'
          SourceSecurityGroupId:
            Ref: CoreNLPLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'corenlp-stg-access-logs'
  AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: '582318560864'
            Action:
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${AccessLogsBucket}/Logs/AWSLogs/${AWS::AccountId}/*

  CoreNLPRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
              - ec2.amazonaws.com
              - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
  CoreNLPInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: CoreNLPRole

  CoreNLPLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: 'ami-075e0d6ba88027545'
      InstanceType: t2.micro
      KeyName: 'CoreNLPStaging'
      SecurityGroups:
      - Ref: CoreNLPInstanceSecurityGroup
      IamInstanceProfile:
        Ref: CoreNLPInstanceProfile
  CoreNLPAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: 'CoreNLPStaging'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Cooldown: 300
      DesiredCapacity: '1'
      MinSize: '1'
      MaxSize: '1'
      LaunchConfigurationName:
        Ref: CoreNLPLaunchConfig
      # Direct reference to subnets registered to default-vpc
      VPCZoneIdentifier:
        - subnet-05448f72
        - subnet-23a04f7a
      TargetGroupARNs:
        - Ref: CoreNLPTargetGroup
      Tags:
        - Key: Name
          Value: 'core-nlp-staging'
          PropagateAtLaunch: 'true'

  CoreNLPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: CoreNLPTargetGroup
      LoadBalancerArn:
        Ref: CoreNLPLoadBalancer
      Port: 9000
      Protocol: HTTP
  CoreNLPLoadBalancer:
    DependsOn: AccessLogsBucketPolicy
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: CoreNLPStaging
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogsBucket
        - Key: access_logs.s3.prefix
          Value: Logs
      # Direct reference to subnets registered to default-vpc
      Subnets:
        - subnet-05448f72
        - subnet-23a04f7a
      SecurityGroups:
        - Ref: CoreNLPLoadBalancerSecurityGroup
  CoreNLPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 10
      HealthCheckPath: /
      Port: 9000
      Protocol: HTTP
      # Default VPC
      VpcId: vpc-25c00640

Outputs:
  WebappUrl:
    Description: CoreNLP Access URL
    Value: !GetAtt CoreNLPLoadBalancer.DNSName
